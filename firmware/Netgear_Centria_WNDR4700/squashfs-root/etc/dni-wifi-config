#!/bin/sh

FORCE_CREATE_VAP=${FORCE_CREATE_VAP:="on"}

DNI_CONFIG=1
OPENWRT_CONFIG=${OPENWRT_CONFIG}

if [ -z "${DNI_CONFIG}${OPENWRT_CONFIG}" ]; then
    if [ "x$(ps | grep datalib)" != "x" ]; then
        export DNI_CONFIG=1
    elif [ -f /lib/wifi/madwifi11n.sh ]; then
        export OPENWRT_CONFIG=1
    fi
fi

# Get the needed variable for configuring wireless and translate to
# content to more readable value.

# g/n interface is wifi0 and a/n interface is wifi1
wlg_radio_id=0
wlg_guest_radio_id=0
wla_radio_id=1
wla_guest_radio_id=1
wlg_wds_repeater_radio_id=0
wla_wds_repeater_radio_id=1
num_radio=0
num_interface=0

onoff_0="off"
onoff_1="on"
onoff_="off"

onoff_inv_0="on"
onoff_inv_1="off"
onoff_inv_="off"

sectype_1="off"
sectype_2="wep"
sectype_3="psk"
sectype_4="psk2"
sectype_5="psk_mixed"
sectype_6="wpa"

wep_auth_type_0="open"
wep_auth_type_1="shared"
wep_auth_type_2="auto"

preamble_0="auto"
preamble_1="short"
preamble_2="long"

[ -f /etc/ath/board.conf ] && . /etc/ath/board.conf 
if [ "$wla_exist" = "on" ]; then
    country_code_0=710              # Africa
    country_code_1=764              # Asia Thailand
    country_code_2=5000             # Australi
    country_code_3=5001             # Canada
    country_code_4=276              # Europe Germany
    country_code_5=376              # Israel
    country_code_6=392              # Japan
    country_code_7=412              # Korea
    country_code_8=484              # Mexica
    country_code_9=76               # South America Brazil
    country_code_10=841             # United States
    country_code_11=156             # China
    country_code_12=356             # India
    country_code_13=458             # Malaysia
    country_code_14=12              # Middle East (Algeria/Syria/Yemen), use Algeria
    country_code_15=364             # Middle East (Iran/Lebanon/Qatar), use Iran
    country_code_16=792             # Middle East (Turkey/Egypt/Tunisia/Kuwait), use Turkey
    country_code_17=682             # Middle East (Saudi Arabia)
    country_code_18=784             # Middle East (United Arab Emirates)
    country_code_19=643             # Russia
    country_code_20=702             # Singapore
    country_code_21=158             # Taiwan
else
    country_code_0=710              # Africa
    country_code_1=764              # Asia Thailand
    country_code_2=5000             # Australi
    country_code_4=276              # Europe Germany
    country_code_5=376              # Israel
    country_code_6=392              # Japan
    country_code_7=412              # Korea
    country_code_8=484              # Mexica
    country_code_9=76               # South America Brazil
    country_code_10=841             # North America
    country_code_19=643             # Russia
    country_code_22=376             # Middle East, use Israel instead
fi

wps_status_5="configured"
wps_status_1="unconfigured"

wds_role_0="repeater"
wds_role_1="rootap"

tpscale_100=0
tpscale_75=1
tpscale_63=2
tpscale_50=3
tpscale_33=4
tpscale_25=5
tpscale_12=6
tpscale_min=7

dni_scan_wifi() {
    local cfgfile="$1"
    config_cb() {
	config_get TYPE "$CONFIG_SECTION" TYPE
	case "$TYPE" in
	    wifi-device)
		append DEVICES "$CONFIG_SECTION"
		;;
	    wifi-iface)
		config_get device "$CONFIG_SECTION" device
		config_get vifs "$device" vifs
		append vifs "$CONFIG_SECTION"
		config_set "$device" vifs "$vifs"
		;;
	esac
    }
    config_load "${cfgfile:-wireless}"
}

export_set() {
    [ -n "$3" ] && {
        eval export -- "${1}_${2}=\${3}"
    }
}

config_get_onoff() {
    local _tmp
    config_get _tmp "$2" "$3" "$4"
    case "$_tmp" in
	1|on|true|enabled) _tmp="on";;
	0|off|false|disabled) _tmp="off";;
	*) _tmp="$4";;
    esac
    export ${NO_EXPORT:+-n} "$1=$_tmp"
}

export_dni_madwifi11n() {
    local device="$1"
    config_get channel "$device" channel
    config_get vifs "$device" vifs
    config_get txpower "$device" txpower
    config_get hwmode "$device" hwmode
    config_get htmode "$device" htmode
    local i=0
    local wl_chmode
    local wl_band
    local wl_prefix
    local wl_autoch
    autoed=""

    echo "$hwmode" | grep -q -i 'G' && {
        wl_prefix="wlg"
        wl_band='g'
    } || {
        wl_prefix="wla"
        wl_band='a'
    }
    case "$htmode" in
        *20)
            wl_chmode=11n${wl_band}ht20
            wl_autoch=11n${wl_band}ht20
            ;;
        *40+)
            wl_chmode=11n${wl_band}ht40plus
            wl_autoch=11n${wl_band}ht40
            ;;
        *40-)
            wl_chmode=11n${wl_band}ht40minus
            wl_autoch=11n${wl_band}ht40
            ;;
        *)
            wl_chmode=11"$wl_band"
            wl_autoch=11"$wl_band"
            ;;
    esac

    [ "$channel" != "auto" -a "$channel" != "0" ] || {
        autoed=$wl_autoch
    }

    local wl_channel="${autoed:-$channel}"
    export_set "$wl_prefix" "chmode" "$wl_chmode"
    export_set "$wl_prefix" "channel" "${autoed:-$channel}"
    config_get disabled "$device" disabled
    [ 1 == "$disabled" ] && {
        export_set "$wl_prefix" if_onoff off
        FORCE_CREATE_VAP="off"
    } || export_set "$wl_prefix" if_onoff on
    export_set "$wl_prefix" exist on

    # Set guest interface to off by default, and will set it to on if guest network is set
    export_set "${wl_prefix}_guest" if_onoff 'off'
    for vif in $vifs; do
        config_get enc "$vif" encryption
        config_get mode "$vif" mode
        config_get ssid "$vif" ssid

        export_set "$wl_prefix" "ssid" "$ssid"

        local wl_enc
        case "$mode" in
            ap)
                export_set "$wl_prefix" wds_onoff "off"
                case "$enc" in
                    wpa*|WPA*|*PSK*|*psk*|*mixed*)
                        export_set "$wl_prefix" sectype "$enc"
                        config_get key "$vif" key
                        export_set "$wl_prefix" key $key
                        ;;
                    *)
                        wl_enc="off"
                        ;;
                esac
                ;;
            *)
                # Not support yet
                ;;
        esac
        export_set "$wl_prefix" "sectype" "$wl_enc"

        config_get rts "$vif" rts 2347
        export_set "$wl_prefix" "rts" "${rts}"

        config_get frag "$vif" frag 2346
        export_set "$wl_prefix" "frag" "${frag}"

        config_get_onoff hidden "$vif" hidden 'off'
        export_set "$wl_prefix" hide_ssid "$hidden"

        config_get_onoff wmm "$vif" wmm 'on'
        export_set "$wl_prefix" wmm_onoff "$wmm"

        config_get_onoff wps "$vif" wps 'off'
        export_set "$wl_prefix" wps_onoff "$wps"

        config_get_onoff wps_locked "$vif" wps_locked 'off'
        export_set "$wl_prefix" wps_ap_setup_locked "$wps_locked"

        config_get wps_configured "$vif" wps_configured
        case "$wps_configured" in
            1|configured) wps_configured="configured";;
            *) wps_configured="unconfigured";;
        esac
        export_set "$wl_prefix" wps_configured "$wps_configured"

        config_get_onoff isolation "$vif" isolation 'off'
        export_set "$wl_prefix" wireless_isolation_onoff "$isolation"

        config_get_onoff pureg "$vif" pureg 'off'
        export_set "$wl_prefix" pureg "$pureg"

        config_get_onoff puren "$vif" puren 'off'
        export_set "$wl_prefix" puren "$puren"

        config_get_onoff countryie "$vif" countryie 'off'
        export_set "$wl_prefix" country_ie "$countryie"

        config_get_onoff acl "$vif" acl 'off'
        export_set "$wl_prefix" acl_onoff "$acl"

        config_get_onoff lan_access "$vif" lan_access 'off'
        export_set "$wl_prefix" lan_restricted_access_onoff "$lan_access"

        i=$(($i + 1))
    done
}

if [ -n "$DNI_CONFIG" ]; then
    eval wlg_if_onoff=\$onoff_`config get endis_wl_radio`
    eval wla_if_onoff=\$onoff_`config get endis_wla_radio`
    eval wlg_guest_if_onoff=\$onoff_`config get wlg1_endis_guestNet`
    eval wla_guest_if_onoff=\$onoff_`config get wla1_endis_guestNet`
    lan_ipaddr=`config get lan_ipaddr`
    wsc_lock_down=`config get wps_lock_down`
    wsc_pin_attack_check=`config get wps_pin_attack_check`
    wsc_pin_attack_num=`config get wps_pin_attack_num`
    wsc_pin_history_failures=`config get wps_pin_history_failures`
    wsc_uuid_mac=`cat /tmp/mac_addr_2g`

    if [ "x$wlg_if_onoff" = "xon" -o "x$FORCE_CREATE_VAP" = "xon" ]; then
        wlg_ssid=`config get wl_ssid`
        wlg_channel=`config get wl_hidden_channel`
        if [ "$wlg_channel" = "0" ]; then wlg_channel="11ng"; fi
        wlg_chmode=`config get wl_simple_mode`
        eval wlg_pureg_onoff=\$onoff_`config get wl_pureg`
        eval wlg_puren_onoff=\$onoff_`config get wl_puren`
        eval wlg_sectype=\$sectype_`config get wl_sectype`
        eval wlg_auth=`config get wl_auth`
        eval wlg_hide_ssid_onoff=\$onoff_inv_`config get endis_ssid_broadcast`
        wlg_rts=`config get wl_rts`
        wlg_frag=`config get wl_frag`
        eval wlg_wmm_onoff=\$onoff_`config get endis_wl_wmm`
        eval wlg_preamble=\$preamble_`config get wl_plcphdr`
        eval wlg_country_ie_onoff=\$onoff_`config get wl_endis_country_ie`
        case "${wlg_chmode}" in
            1)
                wlg_chmode=11G;
                ;;
            2)
                wlg_chmode=11NGHT20;
                ;;
            3)
                wlg_chmode=11NGHT40PLUS;
                ;;
            4)
                wlg_chmode=11B;
                ;;
            5)
                wlg_chmode=11NGHT40MINUS;
                ;;
            6)
                wlg_chmode=11NGHT40;
                ;;
            *)
                wlg_chmode=11NGHT20;
                ;;
        esac
        eval wlg_wps_configured=\$wps_status_`config get wps_status`
        wlg_wps_ap_setup_locked=`config get endis_pin`
        eval wlg_wps_onoff=\$onoff_`config get endis_wl_wps`
        eval wlg_acl_onoff=\$onoff_`config get wl_access_ctrl_on`
        eval wlg_wds_onoff=\$onoff_`config get wds_endis_fun`
        eval wlg_wds_role=\$wds_role_`config get wds_repeater_basic`
        eval wlg_wds_repeater_assoc_onoff=\$onoff_inv_`config get wds_endis_ip_client`
        eval wlg_lan_restricted_access_onoff=\$onoff_`config get endis_wlg_wireless_isolation`
        eval wlg_wireless_isolation_onoff=\$onoff_`config get endis_wlg_wireless_isolation`
        wlg_powerctrl=`config get wl_txctrl`
        wlg_disablecoext=`config get wl_disablecoext`
        eval wlg_tpscale=\$tpscale_`config get wl_tpscale`
    fi

    if [ "x$wla_if_onoff" = "xon" -o "x$FORCE_CREATE_VAP" = "xon" ]; then
        wla_ssid=`config get wla_ssid`
        wla_channel=`config get wla_hidden_channel`
        if [ "$wla_channel" = "0" ]; then wla_channel="11na"; fi
        wla_chmode=`config get wla_simple_mode`
        eval wla_sectype=\$sectype_`config get wla_sectype`
        eval wla_auth=`config get wla_auth`
        eval wla_hide_ssid_onoff=\$onoff_inv_`config get wla_endis_ssid_broadcast`
        wla_rts=`config get wla_rts`
        wla_frag=`config get wla_frag`
        eval wla_wmm_onoff=\$onoff_`config get endis_wla_wmm`
        eval wla_preamble=\$preamble_`config get wla_plcphdr`
        eval wla_country_ie_onoff=\$onoff_`config get wla_endis_country_ie`
        case "${wla_chmode}" in
            1)
                wla_chmode=11A;
                ;;
            2)
                wla_chmode=11NAHT20;
                ;;
            3)
                case "$wla_channel" in
                    36|44|52|60|100|108|116|124|132|149|157)
                        wla_chmode=11NAHT40PLUS;
                        ;;
                    40|48|56|64|104|112|120|128|136|153|161)
                        wla_chmode=11NAHT40MINUS;
                        ;;
                    149|165)
                        wla_chmode=11NAHT20;
                        ;;
                    *)
                        wla_chmode=11NAHT40;
                        ;;
                esac
                ;;
            *)
                wla_chmode=11NAHT40MINUS;
                ;;
        esac
        eval wla_wps_configured=\$wps_status_`config get wla_wps_status`
        wla_wps_ap_setup_locked=`config get wla_endis_pin`
        eval wla_wps_onoff=\$onoff_`config get endis_wla_wps`
        eval wla_acl_onoff=\$onoff_`config get wla_access_ctrl_on`

        eval wla_wds_onoff=\$onoff_`config get wla_wds_endis_fun`
        eval wla_wds_role=\$wds_role_`config get wds_repeater_basic_a`
        eval wla_wds_repeater_assoc_onoff=\$onoff_inv_`config get wds_endis_ip_client_a`

        eval wla_lan_restricted_access_onoff=\$onoff_`config get endis_wla_wireless_isolation`
        eval wla_wireless_isolation_onoff=\$onoff_`config get endis_wla_wireless_isolation`
        wla_powerctrl=`config get wla_txctrl`
        eval wla_video_mode_onoff=\$onoff_`config get wla_enable_video_value`
        wla_disablecoext=1
        eval wla_tpscale=\$tpscale_`config get wla_tpscale`
    fi

    if [ "x$wlg_guest_if_onoff" = "xon" -o "x$FORCE_CREATE_VAP" = "xon" ]; then
        wlg_guest_ssid=`config get wlg1_ssid`
        eval wlg_guest_sectype=\$sectype_`config get wlg1_sectype`
        eval wlg_guest_auth=`config get wlg1_auth`
        # The parameter of iwpriv to enable and disable SSID broadcast is
        # hide_ssid, and the varible in system is ssid_broadcast, so
        # using onoff_inv to convert the value read from system.
        eval wlg_guest_hide_ssid_onoff=\$onoff_inv_`config get wlg1_endis_guestSSIDbro`
        eval wlg_guest_wps_onoff="off"
        eval wlg_guest_lan_restricted_access_onoff=\$onoff_inv_`config get wlg1_endis_allow_guest`
        eval wlg_guest_wireless_isolation_onoff=\$onoff_`config get endis_wlg_guest_wireless_isolation`
        wlg_guest_disablecoext=`config get wl_disablecoext`
    fi

    if [ "x$wla_guest_if_onoff" = "xon" -o "x$FORCE_CREATE_VAP" = "xon" ]; then
        wla_guest_ssid=`config get wla1_ssid`
        eval wla_guest_sectype=\$sectype_`config get wla1_sectype`
        eval wla_guest_auth=`config get wla1_auth`
        # The parameter of iwpriv to enable and disable SSID broadcast is
        # hide_ssid, and the varible in system is ssid_broadcast, so
        # using onoff_inv to convert the value read from system.
        eval wla_guest_hide_ssid_onoff=\$onoff_inv_`config get wla1_endis_guestSSIDbro`
        eval wla_guest_wps_onoff="off"
        eval wla_guest_lan_restricted_access_onoff=\$onoff_inv_`config get wla1_endis_allow_guest`
        eval wla_guest_wireless_isolation_onoff=\$onoff_`config get endis_wla_guest_wireless_isolation`
        eval wla_guest_video_mode_onoff=\$onoff_`config get wla1_enable_video_value`
    fi

    eval country_code=\$country_code_`config get wl_country`

    # WPS configuration
    wps_device_name=`config get netbiosname`

    wds_stp_onoff="on"

    # Guest access local network configuration
    lan_restricted_access_init_printed="no"  # check if guest access init has been printed
    wsc_upnp_ad_period=`config get upnp_AdverTime`
    wsc_upnp_ad_ttl=`config get upnp_TimeToLive`
    wl_dtim_wo_guest=`config get wl_dtim_wo_guest`
    wl_dtim_w_guest=`config get wl_dtim_w_guest`
    wl_guest_dtim=`config get wl_guest_dtim`
    wl_dtim_wo_guest=${wl_dtim_wo_guest:-2}
    wl_dtim_w_guest=${wl_dtim_w_guest:-2}
    wl_guest_dtim=${wl_guest_dtim:-2}
elif [ -n "$OPENWRT_CONFIG" ]; then
    . /etc/functions.sh
    DEVICES=
    DRIVERS=
    include /lib/wifi
    dni_scan_wifi

    for device in ${2:-$DEVICES}; do
	    config_get disabled "$device" disabled
	    [ 1 == "$disabled" ] && {
		echo "'$device' is disabled"
		set disable
	    } || set enable
	    config_get iftype "$device" type
	    if eval "type ${1}_$iftype" 2>/dev/null >/dev/null; then
	        eval "scan_$iftype '$device'"
	        eval "export_dni_$iftype '$device'" || echo "$device($iftype): ${1} failed"
	    else
	        echo "$device($iftype): Interface type not supported"
	    fi
    done
    export_set wl dtim_w_guest 2
    export_set wl dtim_wo_guest 2
    export_set wl guest_dtim 2
fi

load_wep_config()
{
    if [ -n "$DNI_CONFIG" ]; then
        local _wl=$1
        local _trans=$2

        config show | grep ${_wl}_key > /tmp/wepkey-$$

        if [ -n $_trans ]; then
            sed -i -e "s/$_wl/$_trans/g" /tmp/wepkey-$$
        fi
        . /tmp/wepkey-$$
        rm /tmp/wepkey-$$
    fi
}

load_wpa_config()
{
    if [ -n "$DNI_CONFIG" ]; then
        local _wl=$1
        local _sectype=$2

        wl_sectype=`config get ${_wl}_wpae_mode`
        wl_auth_sv_ip=`config get ${_wl}_radiusSerIp`
        wl_auth_sv_port=`config get ${_wl}_radiusPort`
        wl_auth_sv_secret=`config get ${_wl}_radiusSecret`
        case "$wl_sectype" in
            *TKIPAES)
                wl_wpa=3
                wl_crypto="CCMP\\ TKIP"
                ;;
            *AES)
                wl_wpa=2
                wl_crypto="CCMP"
                ;;
            *)
                wl_wpa=1
                wl_crypto="TKIP"
                ;;
        esac
    fi
}

dni_config_get()
{
    if [ -n "$DNI_CONFIG" ]; then
        if [ "x$1" != "x" -a "x$2" != "x" ]; then
            case "$2" in
                wds_endis_mac_client*)
                    local _qans
                    eval _qans=\$onoff_inv_`config get $2`
                    eval export -- "${1}=\${_qans}"
                    ;;
                *)
                    local _qans=`config get $2`
                    eval export -- "${1}=\${_qans}"
                    ;;
            esac
        fi
    fi
}

dni_config_get_psk_phrase()
{
    local _wl=$2
    local _sectype=$3
    local _tmp_psk

    if [ -n "$DNI_CONFIG" ]; then
       # crypto defaults: WPA2 vs WPA1
        case "$_sectype" in
            wpa2*|WPA2*|*PSK2*|*psk2*)
                _tmp_psk=`config get ${_wl}_wpa2_psk`
                ;;
            *mixed*)
                _tmp_psk=`config get ${_wl}_wpas_psk`
                ;;
            *)
                _tmp_psk=`config get ${_wl}_wpa1_psk`
                ;;
        esac
        eval export -- "${1}=\$_tmp_psk"
    elif [ -n "$OPENWRT_CONFIG" ]; then
        [ "$_wl" = "wl" ] && _wl="wlg"
        eval export -- "${1}=\$"${_wl}_key""
    fi
}
