#!/bin/sh
##################################################################################
## configure_vlanvap
##
## shell function to configure the vap for vlan
## arguments
##   $1 - $APNAME - name of the interface eg. ath0
##   $2 - $BRNAME - name of the bridge eg. br2
##   $3 - $VLANID - Id of the VLAN, eg 2
##   $4 - $SECMODE - Security mode like WPA
##   $5 - $SECFILE - like 8021x.conf
## call as
##     configure_vlanvap ath0 br2 2 WPA wpa2EAP.conf
##
configure_vlanvap() {
        VAPNAME=$1
        VBRNAME=$2
        VVLANID=$3
        VSECMODE=$4
        VSECFILE=$5
        VIPADDR=$6
        #verify sec args 
        if [ "${VSECMODE}" != "None" ]; then
            if [ ${VSECFILE} = "None" ]; then
                echo "No security file specified for $VSECMODE on $VAPNAME"
                exit 1
            fi
        fi
        #add tags on both eth0, eth1 and athx
        VESSID=`iwconfig ${VAPNAME} | grep ESSID | cut -f2 -d\"`
        brctl addbr $VBRNAME
        brctl delif $BRIDGE_IF $VAPNAME
        vconfig add $VAPNAME $VVLANID
        vconfig add eth0 $VVLANID
        vconfig add eth1 $VVLANID
        brctl addif $VBRNAME $VAPNAME.$VVLANID
        brctl addif $VBRNAME eth0.$VVLANID
        brctl addif $VBRNAME eth1.$VVLANID
        ifconfig $VAPNAME.$VVLANID up
        ifconfig eth0.$VVLANID up
        ifconfig eth1.$VVLANID up
        ifconfig $VBRNAME $VIPADDR up

		##
		## Add a gratutious ARP after the bridge is up to ensure
		## "Everybody knows your name"
		##

	    arping -U -c 1 -I ${VBRNAME} $VIPADDR


        ##
        ## If hostapd or topology needs to know about this, lets create
        ## a bridge record
        ##

        if [ "${VSECMODE}" != "WEP" -a "${VSECMODE}" != "None" ]; then
            echo -e "\tinterface $VAPNAME" >> /tmp/bc$VVLANID
        fi
} 
#end configure_vlanvap

Check_HT_TKIP()
{
    isht=`expr match $AP_CHMODE .*HT.*`
    #If HT mode is enabled, then check.

    if [ "${isht}" != 0 ]; then
        if [ "${AP_CYPHER}" = "TKIP" -a "${AP_SECMODE}" = "WPA" ]; then
            echo "vap1: TKIP cannot be used with HT mode"
            exit 1
        fi
    fi

    i=2 

    while [ $i -le 7 ] 
    do
        isht=`eval expr match '$'AP_CHMODE_$i .*HT.* 2>/dev/null`
        isht=${isht:="0"}

        if [ "${isht}" != 0 ]; then
            istkip=`eval expr match '$'AP_CYPHER_$i 'TKIP$' 2>/dev/null`
            secmode=`eval echo '$'AP_SECMODE_$i 2>/dev/null`
            istkip=${istkip:="0"}
            secmode=${secmode:="None"}

            if [ "${istkip}" != "0" -a "${secmode}" = "WPA" ]; then
                echo "vap$i: TKIP cannot be used with HT mode"
                exit 1
            fi
        fi
        i=`expr $i + 1`
    done

    return 0
}

#####################################################################################
##
## "main" procedure
##

if [ -f /tmp/.apup ]; then
    echo "AP is already up"
    exit
fi

MODLIST=`lsmod | cut -f1,0 -d" " | grep ath_hal `

if [ "${MODLIST}" = "ath_hal" ]; then
    echo "AP is already up"
    exit
fi

##
## Bring in the default environmental variables
##

. /etc/ath/apcfg

# Check for TKIP & HT
Check_HT_TKIP

echo 1 > /tmp/.apup

WAN_IF=${WAN_IF:=eth0}
LAN_IF=${LAN_IF:=eth1}
APVLANMODE=${AP_VLAN_MODE:="0"}
HOSTAPD_VER=`hostapd -v 2>&1|grep hostapd|cut -f2 -d' '`

##
## For safety, delete all /tmp nodes we may re-create
##

rm -rf /tmp/br*
rm -rf /tmp/bc*
rm -rf /tmp/ap*
rm -rf /tmp/sta*
rm -rf /tmp/top*

## Determine the number of radios installed
##

NUMRADIO_AHB=${NUMRADIO_AHB:=0}
[ -f /proc/bus/pci/devices ] && NUMRADIO_PCI=`grep -c 168c /proc/bus/pci/devices` || NUMRADIO_PCI=0
NUMRADIO=`expr ${NUMRADIO_PCI} + ${NUMRADIO_AHB}`

##
## Make sure the number is 1 or 2.  Any other is invalid
##

if [ $NUMRADIO -gt 2 -o $NUMRADIO -lt 1 ]; then
    echo "INVALID CONFIGURATION, RADIO NOT INSTALLED"
    exit 255
fi

if [ "${AP_STARTMODE}" = "dual" ]; then
    if [ $NUMRADIO = 1 ]; then
        AP_STARTMODE=standard
    else
        AP_STARTMODE=multi
    fi
fi

##
## Now, process the modes
##

if [ "${AP_STARTMODE}" = "standard" ]; then
    (export HIDE_SSID=$AP_HIDE_SSID; \
     export RTS=$AP_RTS; \
     export FRAG=$AP_FRAG; \
     export WMM=$AP_WMM; \
     export SHPREAMBLE=$AP_SHPREAMBLE; \
     export ACLFILE=$AP_ACLFILE; \
     export LAN_RESTRICTED_ACS_FILE=$AP_LAN_RESTRICTED_ACS_FILE; \
     export WDSFILE=$AP_WDSFILE; \
     export BINTERVAL=$BINTVAL; \
     export DOTH=$AP_DOTH; \
     export ANYSSID_HACK=$AP_ANYSSID_HACK; \
     export COUNTRY_IE=$AP_COUNTRY_IE; \
     export VIDEO_MODE=$AP_VIDEO_MODE; \
     export DTIM_PERIOD=$DTIM; \
     export WIRELESS_ISOLATION=$AP_WIRELESS_ISOLATION; \
     export DISABLECOEXT=$AP_DISABLECOEXT; \
    makeVAP ${AP_MODE:=ap} "$AP_SSID" $AP_RADIO_ID:$AP_RFPARAM
    )
    if [ $? != 0 ]; then
        echo "Unable to create VAP!"
        exit
    fi
    (export WPSFILE=$AP_WPSFILE; \
     export VAP_CREATE_ONLY=$AP_VAP_CREATE_ONLY; \
     export HIDE_SSID=$AP_HIDE_SSID; \
    activateVAP ath0:$AP_RADIO_ID $BRIDGE_IF $AP_SECMODE $AP_SECFILE $WPS_ENABLE $WPS_VAP_TIE
    )

	if [ "$APVLANMODE" = "1" ]
	then
		vconfig add ath0 1
		ifconfig ath0.1 up
		brctl delif $BRIDGE_IF ath0
		brctl addif $BRIDGE_IF ath0.1
	fi
fi

##
## See the activateVAP script for details on arguments.  Other configuration
## examples are as follows:
##

##
## Root AP for WDS
##
if [ "${AP_STARTMODE}" = "rootap" ]; then
    (export HIDE_SSID=$AP_HIDE_SSID; \
     export RTS=$AP_RTS; \
     export FRAG=$AP_FRAG; \
     export WMM=$AP_WMM; \
     export SHPREAMBLE=$AP_SHPREAMBLE; \
     export ACLFILE=$AP_ACLFILE; \
     export LAN_RESTRICTED_ACS_FILE=$AP_LAN_RESTRICTED_ACS_FILE; \
     export WDSFILE=$AP_WDSFILE; \
     export COUNTRY_IE=$AP_COUNTRY_IE; \
     export DTIM_PERIOD=$DTIM; \
     export WIRELESS_ISOLATION=$AP_WIRELESS_ISOLATION; \
     export DISABLECOEXT=$AP_DISABLECOEXT; \
    makeVAP ap-wds "$AP_SSID" $AP_RADIO_ID:$AP_RFPARAM
    )
    if [ $? != 0 ]; then
        echo "Unable to create VAP!"
        exit
    fi
    activateVAP ath0:$AP_RADIO_ID $BRIDGE_IF $AP_SECMODE $AP_SECFILE $WPS_ENABLE
fi

##
## REPEATER
##
## In repeater mode, VAP 1 (ath0) is ALWAYS the AP side, and VAP 2 (ath1) is
## ALWAYS the client side.  Thus, if ROOTAP_MAC needs to be defined, it's for
## VAP 2 and should be ROOTAP_MAC_2.
##
## If ANY OTHER CONFIGURATION is required, then set AP_STARTMODE=multi and
## set the specific VAP configurations as required.
##

if [ "${AP_STARTMODE}" = "repeater" -o "${AP_STARTMODE}" = "repeater-ind" ]; then
    if [ "${AP_STARTMODE}" = "repeater" ]; then
        APMODE="ap-wds"
        STAMODE="sta-wds"
    else
        APMODE="ap-wds-ind"
        STAMODE="sta-wds-ind"
    fi
    (export HIDE_SSID=$AP_HIDE_SSID; \
     export RTS=$AP_RTS; \
     export FRAG=$AP_FRAG; \
     export WMM=$AP_WMM; \
     export SHPREAMBLE=$AP_SHPREAMBLE; \
     export ACLFILE=$AP_ACLFILE; \
     export LAN_RESTRICTED_ACS_FILE=$AP_LAN_RESTRICTED_ACS_FILE; \
     export WDSFILE=$AP_WDSFILE; \
     export COUNTRY_IE=$AP_COUNTRY_IE; \
    makeVAP ${APMODE} "$AP_SSID" $AP_RADIO_ID:$AP_RFPARAM
    )
    if [ $? != 0 ]; then
        echo "Unable to create VAP!"
        exit
    fi
    makeVAP ${STAMODE} "$AP_SSID_2" $AP_RADIO_ID_2:$AP_RFPARAM_2
    if [ $? != 0 ]; then
        echo "Unable to create VAP!"
        exit
    fi

    if [ "${AP_SECMODE_2}" != "WPA" -a "${ROOTAP_MAC_2}" != "" ]; then
        iwconfig ath1 ap $ROOTAP_MAC_2
    fi

    if [ "${AP_STARTMODE}" = "repeater-ind" ]; then
        activateVAP ath0:$AP_RADIO_ID $BRIDGE_IF $AP_SECMODE $AP_SECFILE $WPS_ENABLE
        activateVAP ath1:$AP_RADIO_ID_2 $BRIDGE_IF $AP_SECMODE_2 $AP_SECFILE_2 $WPS_ENABLE_2
    else
        activateVAP ath1:$AP_RADIO_ID_2 $BRIDGE_IF $AP_SECMODE_2 $AP_SECFILE_2 $WPS_ENABLE_2
        activateVAP ath0:$AP_RADIO_ID $BRIDGE_IF $AP_SECMODE $AP_SECFILE $WPS_ENABLE
    fi
fi

## Extender AP
##
if [ "${AP_STARTMODE}" = "extap" ]; then
    makeVAP ap "$AP_SSID" 0:RF:$AP_PRIMARY_CH:$AP_CHMODE $BEACON_INT
    if [ $? != 0 ]; then
        echo "Unable to create VAP!"
        exit
    fi

    AP_SSID_2=${AP_SSID_2:=$AP_SSID}
    ROOTAP_SSID=${ROOTAP_SSID:=$AP_SSID_2}

    if [ "${ROOTAP_SSID}" = "any" -a  "${ROOTAP_MAC}" = "" ]; then
        echo "ROOTAP_MAC should be set if ROOTAP_SSID=any"
        exit 1
    else
        makeVAP sta-ext $ROOTAP_SSID 0:RF:$AP_PRIMARY_CH:$AP_CHMODE
    fi

    if [ "${AP_SECMODE_2}" != "WPA" -a "${ROOTAP_MAC_2}" != "" ]; then
        iwconfig ath1 ap $ROOTAP_MAC_2
    fi
    activateVAP ath1:$AP_RADIO_ID_2 $BRIDGE_IF $AP_SECMODE_2 $AP_SECFILE_2 $WPS_ENABLE_2
    activateVAP ath0:$AP_RADIO_ID $BRIDGE_IF $AP_SECMODE $AP_SECFILE $WPS_ENABLE
fi

##
## Extender STA
##
if [ "${AP_STARTMODE}" = "extsta" ]; then

    ROOTAP_SSID=${ROOTAP_SSID:=$AP_SSID}

    if [ "${ROOTAP_SSID}" = "any" -a  "${ROOTAP_MAC}" = "" ]; then
        echo "ROOTAP_MAC should be set if ROOTAP_SSID=any"
        exit 1
    else
        makeVAP sta-ext "$ROOTAP_SSID" 0:RF:$AP_PRIMARY_CH:$AP_CHMODE
    fi

    if [ "${AP_SECMODE}" != "WPA" -a "${ROOTAP_MAC}" != "" ]; then
        iwconfig ath0 ap $ROOTAP_MAC
    fi

    activateVAP ath0:$AP_RADIO_ID $BRIDGE_IF $AP_SECMODE $AP_SECFILE $WPS_ENABLE
fi

##
## "VIRTUAL WIRE" client
##
if [ "${AP_STARTMODE}" = "client" ]; then
    makeVAP sta-wds "$AP_SSID" $AP_RADIO_ID:$AP_RFPARAM
    if [ $? != 0 ]; then
        echo "Unable to create VAP!"
        exit
    fi

    if [ "${AP_SECMODE}" != "WPA" -a "${ROOTAP_MAC}" != "" ]; then
        iwconfig ath0 ap $ROOTAP_MAC
    fi

    activateVAP ath0:$AP_RADIO_ID $BRIDGE_IF $AP_SECMODE $AP_SECFILE $WPS_ENABLE
fi


##
## STATION FORWARDING
##
if [ "${AP_STARTMODE}" = "stafwd" ]; then
    makeVAP sta-fwd "$AP_SSID" $AP_RADIO_ID:$AP_RFPARAM
    if [ $? != 0 ]; then
        echo "Unable to create VAP!"
        exit
    fi

    activateVAP ath0:$AP_RADIO_ID $BRIDGE_IF $AP_SECMODE $AP_SECFILE $WPS_ENABLE
fi

##
## mBSSID case with all types of authentication
## Note that WEP MUST be the first VAP
## This is brute force, but effective.  Note that we set the becon interval
## to 400
##

WEP_INTERFACE=0
if [ "${AP_STARTMODE}" = "multi" ]; then
    NUM_VAP=0
    NUM_STA_VAP=0
    VAP_COUNT_RADIO_0=0
    VAP_COUNT_RADIO_1=0
    for i in $my_vaps;
    do
        ITER_SSID="AP_SSID$i"
        ITER_MODE="AP_MODE$i"
        ITER_SECMODE="AP_SECMODE$i"
        ITER_RFPARAM="AP_RFPARAM$i"
        ITER_RADIO_ID="AP_RADIO_ID$i"
        eval ITER_SSID=\$$ITER_SSID
        eval ITER_MODE=\$$ITER_MODE
        eval ITER_SECMODE=\$$ITER_SECMODE
        eval ITER_RFPARAM=\$$ITER_RFPARAM
        eval ITER_RADIO_ID=\$$ITER_RADIO_ID
        eval ITER_HIDE_SSID=\$`echo AP_HIDE_SSID$i`;
        eval ITER_RTS=\$`echo AP_RTS$i`;
        eval ITER_FRAG=\$`echo AP_FRAG$i`;
        eval ITER_WMM=\$`echo AP_WMM$i`;
        eval ITER_SHPREAMBLE=\$`echo AP_SHPREAMBLE$i`;
        eval ITER_ACLFILE=\$`echo AP_ACLFILE$i`;
        eval ITER_LAN_RESTRICTED_ACS_FILE=\$`echo AP_LAN_RESTRICTED_ACS_FILE$i`;
        eval ITER_WDSFILE=\$`echo AP_WDSFILE$i`;
        eval ITER_BINTERVAL=\$`echo BINTVAL$i`;
        eval ITER_DOTH=\$`echo AP_DOTH$i`;
        eval ITER_ANYSSID_HACK=\$`echo AP_ANYSSID_HACK$i`;
        eval ITER_COUNTRY_IE=\$`echo AP_COUNTRY_IE$i`;
        eval ITER_VIDEO_MODE=\$`echo AP_VIDEO_MODE$i`;
        eval ITER_DTIM=\$`echo DTIM$i`;
        eval ITER_IGNORE11D=\$`echo AP_IGNORE11D$i`;
        eval ITER_WIRELESS_ISOLATION=\$`echo AP_WIRELESS_ISOLATION$i`;
        eval ITER_DISABLECOEXT=\$`echo AP_DISABLECOEXT$i`;
        if [ "x${ITER_SSID}" != "x" ]; then
            VAP_COUNT_VAR="VAP_COUNT_RADIO_$ITER_RADIO_ID"
            eval ITER_VAP_COUNT=\$$VAP_COUNT_VAR
            ITER_VAP_COUNT=$(($ITER_VAP_COUNT+1))
            export $VAP_COUNT_VAR=$ITER_VAP_COUNT
            if [ "$VAP_COUNT_RADIO_0" -gt "$MAX_VAPS_PER_RADIO" -o "$VAP_COUNT_RADIO_1" -gt "$MAX_VAPS_PER_RADIO" ]; then
                echo "Exceeded max VAPs per Radio($MAX_VAPS_PER_RADIO)"
                exit 255
            fi
            if [ "${ITER_SECMODE}" = "WEP" ]; then
                echo $WEP_INTERFACE | grep "R${ITER_RADIO_ID}" > /dev/null
                if [ $? -eq 0 ]; then
                    echo "Unable to create additional WEP VAP"
                    exit 255
                else
                    WEP_INTERFACE="R${ITER_RADIO_ID}"
                fi
            fi
            if [ "${ITER_MODE}" = "sta-wds" -o "${ITER_MODE}" = "sta" ]; then
                if [ "${NUM_STA_VAP}" != 1 ]; then
                    NUM_VAP=$(($NUM_VAP+1))
	            if [ "${BEACON_INT}" != "" ]; then
	                BEACON_INTVAL=$(($BEACON_INT * $NUM_VAP))
	            else
	                BEACON_INTVAL=$((100*$NUM_VAP))
                    fi
                    (export HIDE_SSID=$ITER_HIDE_SSID; \
                        export RTS=$ITER_RTS; \
                        export FRAG=$ITER_FRAG; \
                        export WMM=$ITER_WMM; \
                        export SHPREAMBLE=$ITER_SHPREAMBLE; \
                        export ACLFILE=$ITER_ACLFILE; \
                        export LAN_RESTRICTED_ACS_FILE=$ITER_LAN_RESTRICTED_ACS_FILE; \
                        export WDSFILE=$ITER_WDSFILE; \
                        export BINTERVAL=$ITER_BINTERVAL; \
                        export DOTH=$ITER_DOTH; \
                        export ANYSSID_HACK=$ITER_ANYSSID_HACK; \
                        export COUNTRY_IE=$ITER_COUNTRY_IE; \
                        export VIDEO_MODE=$ITER_VIDEO_MODE; \
                        export DTIM_PERIOD=$ITER_DTIM; \
                        export IGNORE11D=$ITER_IGNORE11D; \
                        export WIRELESS_ISOLATION=$ITER_WIRELESS_ISOLATION; \
                        export DISABLECOEXT=$ITER_DISABLECOEXT; \
                        makeVAP $ITER_MODE "$ITER_SSID" $ITER_RADIO_ID:$ITER_RFPARAM $BEACON_INTVAL
                    )
                    iwconfig | grep -c ath | grep -i $NUM_VAP > /dev/null
                    if [ $? != 0 ]; then
                        echo "Unable to create VAP!"
                        exit
                    fi
                    NUM_STA_VAP=1
                else
                    echo "Maximum number of STA VAPs exceeded for multi mode!!!"
                fi 
            else
                NUM_VAP=$(($NUM_VAP+1))
	        if [ "${BEACON_INT}" != "" ]; then
	            BEACON_INTVAL=$(($BEACON_INT * $NUM_VAP))
	        else
	            BEACON_INTVAL=$((100*$NUM_VAP))
                fi
                (export HIDE_SSID=$ITER_HIDE_SSID; \
                    export RTS=$ITER_RTS; \
                    export FRAG=$ITER_FRAG; \
                    export WMM=$ITER_WMM; \
                    export SHPREAMBLE=$ITER_SHPREAMBLE; \
                    export ACLFILE=$ITER_ACLFILE; \
                    export LAN_RESTRICTED_ACS_FILE=$ITER_LAN_RESTRICTED_ACS_FILE; \
                    export WDSFILE=$ITER_WDSFILE; \
                    export BINTERVAL=$ITER_BINTERVAL; \
                    export DOTH=$ITER_DOTH; \
                    export ANYSSID_HACK=$ITER_ANYSSID_HACK; \
                    export COUNTRY_IE=$ITER_COUNTRY_IE; \
                    export VIDEO_MODE=$ITER_VIDEO_MODE; \
                    export DTIM_PERIOD=$ITER_DTIM; \
                    export IGNORE11D=$ITER_IGNORE11D; \
                    export WIRELESS_ISOLATION=$ITER_WIRELESS_ISOLATION; \
                    export DISABLECOEXT=$ITER_DISABLECOEXT; \
                    makeVAP $ITER_MODE "$ITER_SSID" $ITER_RADIO_ID:$ITER_RFPARAM $BEACON_INTVAL
                )
		iwconfig | grep -c ath | grep -i $NUM_VAP > /dev/null
		if [ $? != 0 ]; then
		    echo "Unable to create VAP!"
		    exit
                fi
            fi
            CUR_APNAME=`cfg -s | grep CUR_APNAME | awk -F= '{print $2}'`
            [ "x$i" != "x''" ] && eval INTF_NAME${i}=$CUR_APNAME || INTF_NAME=$CUR_APNAME
        fi
    done

    VAP_NUM=0
    NUM_STA_VAP=0
    if [ "x$REVERT_WDS_ACT_ORDER" = "x1" ]; then
        sta_wds_list=""
        my_vaps_new=""

        for my_vap in $my_vaps
        do
            eval ap_mode_tmp=\$AP_MODE${my_vap}
            case $ap_mode_tmp in
                sta-wds*)
                    sta_wds_list="$sta_wds_list $my_vap"
                    ;;
                *)
                    my_vaps_new="$my_vaps_new $my_vap"
                    ;;
            esac
        done
        my_vaps="$my_vaps_new $sta_wds_list"
    fi

    for i in $my_vaps;
    do
        ITER_INTF_NAME="INTF_NAME$i"
        ITER_SSID="AP_SSID$i"
        ITER_RADIO_ID="AP_RADIO_ID$i"
        ITER_SECMODE="AP_SECMODE$i"
        ITER_SECFILE="AP_SECFILE$i"
        ITER_WPS_ENABLE="WPS_ENABLE$i"
        ITER_WPS_VAP_TIE="WPS_VAP_TIE$i"
        eval ITER_INTF_NAME=\$$ITER_INTF_NAME
        eval ITER_SSID=\$$ITER_SSID
        eval ITER_RADIO_ID=\$$ITER_RADIO_ID
        eval ITER_SECMODE=\$$ITER_SECMODE
        eval ITER_SECFILE=\$$ITER_SECFILE
        eval ITER_WPS_ENABLE=\$$ITER_WPS_ENABLE
        eval ITER_WPS_VAP_TIE=\$$ITER_WPS_VAP_TIE
        eval ITER_WPSFILE=\$`echo AP_WPSFILE$i`
        eval ITER_VAP_CREATE_ONLY=\$`echo AP_VAP_CREATE_ONLY$i`
        eval ITER_HIDE_SSID=\$`echo AP_HIDE_SSID$i`;
        if [ "${ITER_MODE}" = "sta-wds" -o "${ITER_MODE}" = "sta" ]; then
            if [ "${NUM_STA_VAP}" != 1 ]; then
                if [ "_${ITER_SSID}" != "_" ]; then
                    (export WPSFILE=$ITER_WPSFILE; \
                        export VAP_CREATE_ONLY=$ITER_VAP_CREATE_ONLY; \
                        activateVAP $ITER_INTF_NAME:$ITER_RADIO_ID $BRIDGE_IF $ITER_SECMODE $ITER_SECFILE $ITER_WPS_ENABLE $ITER_WPS_VAP_TIE
                    )
                    VAP_NUM=$(($VAP_NUM+1))
                    NUM_STA_VAP=1
                fi  
            fi
        else
            if [ "_${ITER_SSID}" != "_" ]; then
                (export WPSFILE=$ITER_WPSFILE; \
                    export VAP_CREATE_ONLY=$ITER_VAP_CREATE_ONLY; \
                    export HIDE_SSID=$ITER_HIDE_SSID; \
                    activateVAP $ITER_INTF_NAME:$ITER_RADIO_ID $BRIDGE_IF $ITER_SECMODE $ITER_SECFILE $ITER_WPS_ENABLE $ITER_WPS_VAP_TIE
                )
	        VAP_NUM=$(($VAP_NUM+1))
	    fi
        fi
    done
fi


if [ "${AP_STARTMODE}" = "multivlan" ]; then
    WEP_INTERFACE="" 
    NUM_VAP=0
    NUM_STA_VAP=0
    VAP_COUNT_RADIO_0=0
    VAP_COUNT_RADIO_1=0
    for i in $my_vaps;
    do
        ITER_SSID="AP_SSID$i"
        ITER_MODE="AP_MODE$i"
        ITER_SECMODE="AP_SECMODE$i"
        ITER_RFPARAM="AP_RFPARAM$i"
        ITER_RADIO_ID="AP_RADIO_ID$i"
        eval ITER_SSID=\$$ITER_SSID
        eval ITER_MODE=\$$ITER_MODE
        eval ITER_SECMODE=\$$ITER_SECMODE
        eval ITER_RFPARAM=\$$ITER_RFPARAM
        eval ITER_RADIO_ID=\$$ITER_RADIO_ID
        if [ "_${ITER_SSID}" != "_" ]; then
            VAP_COUNT_VAR="VAP_COUNT_RADIO_$ITER_RADIO_ID"
            eval ITER_VAP_COUNT=\$$VAP_COUNT_VAR
            ITER_VAP_COUNT=$(($ITER_VAP_COUNT+1))
            export $VAP_COUNT_VAR=$ITER_VAP_COUNT
            if [ "$VAP_COUNT_RADIO_0" -gt "$MAX_VAPS_PER_RADIO" -o "$VAP_COUNT_RADIO_1" -gt "$MAX_VAPS_PER_RADIO" ]; then
                echo "Exceeded max VAPs per Radio($MAX_VAPS_PER_RADIO)"
                exit 255
            fi
            if [ "${ITER_SECMODE}" = "WEP" ]; then
                echo $WEP_INTERFACE | grep "R${ITER_RADIO_ID}" > /dev/null
                if [ $? -eq 0 ]; then
                    echo "Unable to create additional WEP VAP"
                    exit 255
                else
                    WEP_INTERFACE="${WEP_INTERFACE}:R${ITER_RADIO_ID}"
                fi
            fi
            if [ "${ITER_MODE}" = "sta-wds" -o "${ITER_MODE}" = "sta" ]; then
                if [ "${NUM_STA_VAP}" != 1 ]; then
                    NUM_VAP=$(($NUM_VAP+1))
                    if [ "${BEACON_INT}" != "" ]; then
                        BEACON_INTVAL=$(($BEACON_INT * $NUM_VAP))
                    else
                        BEACON_INTVAL=$((100*$NUM_VAP))
                    fi    
                    makeVAP $ITER_MODE "$ITER_SSID" 0:$ITER_RFPARAM $BEACON_INTVAL
                    iwconfig | grep -c ath | grep -i $NUM_VAP > /dev/null
                    if [ $? != 0 ]; then
                        echo "Unable to create VAP!"
                        exit
                    fi
                    NUM_STA_VAP=1
                else
                    echo "Maximum number of STA VAPs exceeded for multi vlan mode!!!"
                fi
            else
                NUM_VAP=$(($NUM_VAP+1))
                if [ "${BEACON_INT}" != "" ]; then
	            BEACON_INTVAL=$(($BEACON_INT * $NUM_VAP))
	        else
		    BEACON_INTVAL=$((100*$NUM_VAP))
		fi    
		makeVAP $ITER_MODE "$ITER_SSID" 0:$ITER_RFPARAM $BEACON_INTVAL
		iwconfig | grep -c ath | grep -i $NUM_VAP > /dev/null
		if [ $? != 0 ]; then
		    echo "Unable to create VAP!"
		    exit
                fi
            fi
        fi
    done

    VAP_NUM=0
    NUM_STA_VAP=0
    for i in $my_vaps;
    do
        ITER_SSID="AP_SSID$i"
        ITER_RADIO_ID="AP_RADIO_ID$i"
        ITER_SECMODE="AP_SECMODE$i"
        ITER_SECFILE="AP_SECFILE$i"
        ITER_WPS_ENABLE="WPS_ENABLE$i"
        ITER_WPS_VAP_TIE="WPS_VAP_TIE$i"
        ITER_AP_BRNAME="AP_BRNAME$i"
        eval ITER_SSID=\$$ITER_SSID
        eval ITER_RADIO_ID=\$$ITER_RADIO_ID
        eval ITER_SECMODE=\$$ITER_SECMODE
        eval ITER_SECFILE=\$$ITER_SECFILE
        eval ITER_WPS_ENABLE=\$$ITER_WPS_ENABLE
        eval ITER_WPS_VAP_TIE=\$$ITER_WPS_VAP_TIE
        eval ITER_AP_BRNAME=\$$ITER_AP_BRNAME
        if [ "${ITER_MODE}" = "sta-wds" -o "${ITER_MODE}" = "sta" ]; then
            if [ "${NUM_STA_VAP}" != 1 ]; then
                if [ "_${ITER_SSID}" != "_" ]; then
                    activateVAP ath$VAP_NUM:$ITER_RADIO_ID $ITER_AP_BRNAME $ITER_SECMODE $ITER_SECFILE $ITER_WPS_ENABLE $ITER_WPS_VAP_TIE
                    VAP_NUM=$(($VAP_NUM+1))
                fi
                NUM_STA_VAP=1
            fi
        else
            if [ "_${ITER_SSID}" != "_" ]; then
                activateVAP ath$VAP_NUM:$ITER_RADIO_ID $ITER_AP_BRNAME $ITER_SECMODE $ITER_SECFILE $ITER_WPS_ENABLE $ITER_WPS_VAP_TIE
	        VAP_NUM=$(($VAP_NUM+1))
            fi
        fi
    done

#configure VLANS and bridges
    brctl delif $BRIDGE_IF ${WAN_IF}
    brctl delif $BRIDGE_IF ${LAN_IF}
    ifconfig $BRIDGE_IF 0.0.0.0 up
    if [ "${AP_AUTHIF}" = "WAN" ]; then
            ifconfig ${WAN_IF} $AP_IPADDR up
    else
            ifconfig ${LAN_IF} $AP_IPADDR up
    fi
    

#
#vlan ids must be choosen. This is to provide better control on number of vaps need to be created.
#
    VAP_NUM=0
    for i in $my_vaps;
    do
        ITER_SSID="AP_SSID$i"
        ITER_VLAN="AP_VLAN$i"
        ITER_BRNAME="AP_BRNAME$i"
        ITER_SECMODE="AP_SECMODE$i"
        ITER_SECFILE="AP_SECFILE$i"
        ITER_VIPADDR="AP_VIPADDR$i"
        eval ITER_SSID=\$$ITER_SSID
        eval ITER_VLAN=\$$ITER_VLAN
        eval ITER_BRNAME=\$$ITER_BRNAME
        eval ITER_SECMODE=\$$ITER_SECMODE
        eval ITER_SECFILE=\$$ITER_SECFILE
        eval ITER_VIPADDR=\$$ITER_VIPADDR

        if [ "_${ITER_BRNAME}" = "_" ]; then
            ITER_BRNAME=br${ITER_VLAN}
        fi
        if [ "_${ITER_VLAN}" != "_" ]; then
            configure_vlanvap ath$VAP_NUM ${ITER_BRNAME:="br2"} ${ITER_VLAN} ${ITER_SECMODE:="None"} ${ITER_SECFILE:="None"} ${ITER_VIPADDR}
        fi
        if [ "_${ITER_SSID}" != "_" ]; then
            VAP_NUM=$(($VAP_NUM+1))
        fi
    done
fi

##
## IBSS MODE
##
if [ "${AP_STARTMODE}" = "adhoc" ]; then
    makeVAP adhoc "$IBSS_SSID" $AP_RADIO_ID:$AP_RFPARAM
    if [ $? != 0 ]; then
        echo "Unable to create VAP!"
        exit
    fi

    activateVAP ath0:$AP_RADIO_ID $BRIDGE_IF $AP_SECMODE $AP_SECFILE
fi

##############

echo "CHH: System Configuration"
cfg -s

##############

IS_WPA=`set | grep "SECMODE" | grep "='WPA'"`
IS_WPS=`set | grep "WPS_ENABLE" | grep "='1'\|='2'"`

##
## Now, make the topology file
##

if [ "${IS_WPA}" != "" -o "${IS_WPS}" != "" ]; then
    if [ "${HOSTAPD_VER}" = "v0.7.1" -o "${HOSTAPD_VER}" = "v0.7.2" -o "${HOSTAPD_VER}" = "v0.8.x" ]; then
        is_ht40=`expr match $AP_CHMODE .*HT40.*`
        if [ "${is_ht40}" != "0" -a "${AP_DISABLECOEXT}" = "0" -a "$(config get wlg1_endis_guestNet)" = "1" ]; then
	    sleep 1
        fi
        if [ "${AP_PRIMARY_CH}" = "11ng" -a -f /tmp/conf_filename ]; then
            sleep 2
        fi
        if [ -f /etc/wpa2/vap_create_only -a -f /tmp/conf_filename ]; then
            disabled_vap=`cat /etc/wpa2/vap_create_only`
            enabled_vap=`sed -e "s,$disabled_vap,,g" /tmp/conf_filename`
            [ -n "$enabled_vap" ] && hostapd -B $enabled_vap -e /etc/wpa2/entropy
        elif [ -f /tmp/conf_filename ]; then
            sleep 1
            hostapd  -B `cat /tmp/conf_filename` -e /etc/wpa2/entropy
        fi
        if [ -f /tmp/sta_conf_filename ]; then
            wpa_supplicant `cat /tmp/sta_conf_filename` &
        fi
	
    else
        echo "Making Topology File . . ."
        # for vlan case we should not be adding $BRIDGE_IF 
        if [ -f /tmp/$BRIDGE_IF ] && [ "${AP_STARTMODE}" != "multivlan" ]; then
            echo -e "bridge $BRIDGE_IF" > /tmp/topology.conf
            echo -e "{" >> /tmp/topology.conf
            echo -e "\tipaddress ${AP_IPADDR}" >> /tmp/topology.conf
            echo -e "\tipmask ${AP_NETMASK}" >> /tmp/topology.conf
            cat /tmp/$BRIDGE_IF >> /tmp/topology.conf
            echo -e "\tinterface eth0" >> /tmp/topology.conf
            echo -e "\tinterface eth1" >> /tmp/topology.conf
            echo -e "}" >> /tmp/topology.conf
        else
            echo "bridge none" > /tmp/topology.conf
            echo "{" >> /tmp/topology.conf
            echo "}" >> /tmp/topology.conf
        fi

    ##
    ## Assume up to 8 vlan specifications
    ##
    for i in $my_vaps;
    do
        ITER_VLAN="AP_VLAN$i"
        ITER_BRNAME="AP_BRNAME$i"
        eval ITER_VLAN=\$$ITER_VLAN
        eval ITER_BRNAME=\$$ITER_BRNAME
        if [ -f /tmp/bc${ITER_VLAN} ]; then
            echo -e "bridge ${ITER_BRNAME}" >> /tmp/topology.conf
            echo -e "{" >> /tmp/topology.conf
            echo -e "\tinterface eth0.${ITER_VLAN}" >> /tmp/topology.conf
            echo -e "\tinterface eth1.${ITER_VLAN}" >> /tmp/topology.conf
            cat /tmp/bc${ITER_VLAN} >> /tmp/topology.conf
            echo -e "}" >> /tmp/topology.conf
            #when the file is processed rename it with .done, so that we
            #do not process it again. This should help when we have same
            #vlan for all the vaps in mbssid
            mv /tmp/bc${ITER_VLAN} /tmp/bc${ITER_VLAN}.done
        fi
    done

    if [ -f /tmp/aplist0 -o -f /tmp/stalist0 ]; then
        CREATE_MASK=""
        if [ -f /tmp/aplist0.stop ]; then
            CREATE_MASK="#"
        fi
        echo "${CREATE_MASK}radio wifi0" >> /tmp/topology.conf
        echo "${CREATE_MASK}{" >> /tmp/topology.conf

        if [ -f /tmp/aplist0 ]; then
            echo -e "${CREATE_MASK}\tap" >> /tmp/topology.conf
            echo -e "${CREATE_MASK}\t{" >> /tmp/topology.conf
            cat /tmp/aplist0 >> /tmp/topology.conf
            echo -e "${CREATE_MASK}\t}" >> /tmp/topology.conf
        fi

        if [ -f /tmp/stalist0 ]; then
            cat /tmp/stalist0 >> /tmp/topology.conf
        fi

        echo "${CREATE_MASK}}" >> /tmp/topology.conf
    fi

    if [ -f /tmp/aplist1 -o -f /tmp/stalist1 ]; then
        CREATE_MASK=""
        if [ -f /tmp/aplist1.stop ]; then
            CREATE_MASK="#"
        fi
        echo "${CREATE_MASK}radio wifi1" >> /tmp/topology.conf
        echo "${CREATE_MASK}{" >> /tmp/topology.conf
        
        if [ -f /tmp/aplist1 ]; then
            echo -e "${CREATE_MASK}\tap" >> /tmp/topology.conf
            echo -e "${CREATE_MASK}\t{" >> /tmp/topology.conf
            cat /tmp/aplist1 >> /tmp/topology.conf
            echo -e "${CREATE_MASK}\t}" >> /tmp/topology.conf
        fi

        if [ -f /tmp/stalist1 ]; then
            cat /tmp/stalist1 >> /tmp/topology.conf
        fi
        echo "${CREATE_MASK}}" >> /tmp/topology.conf
    fi

    #
    # Start hostapd & wsc_supplicant.  Check for the
    # appropriate file lists to determine if they need
    # to be started . . .
    #
    # Note that /var/run is statically linked to /tmp . . .
    #

    if [ -f /tmp/aplist0 -o -f /tmp/aplist1 ]; then
        hostapd /tmp/topology.conf &
    fi
    if [ -f /tmp/stalist0 -o -f /tmp/stalist1 ]; then
        sleep 2
        wpa_supplicant /tmp/topology.conf &
    fi
  fi
fi

#wps led should be turn on if security is not none and wireless is switch on
if [ "x$NUMRADIO" = "x1" ]; then
    [ -n "${WPS_LED_BEHAVIOR}" ] && echo ${WPS_LED_BEHAVIOR} > /proc/simple_config/simple_config_led
else
    [ -n "${WPS_LED_BEHAVIOR}" ] && echo "Ignore turn off WPS LED in apup"
fi

#check if VoW need to be enabled
if [ "${VOW_ENABLE}" -eq "1" ]; then
    iwpriv wifi0 setVowExt 31
fi

if [ "${VOW_ENABLE_2}" -eq "1" ]; then
    iwpriv wifi1 setVowExt 31
fi
